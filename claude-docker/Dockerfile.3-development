# Layer 3: Development layer for future enhancements
FROM claude-docker:minimal

# This layer is for future development and experimental features
# It builds on top of the stable minimal layer

# Copy container prompt configuration first as root
USER root
SHELL ["/bin/bash", "-c"]
COPY container-prompt.sh /etc/profile.d/container-prompt.sh
RUN chmod +x /etc/profile.d/container-prompt.sh

USER developer
WORKDIR /home/developer

# Use bash for commands (zsh is at different location)
SHELL ["/bin/bash", "-c"]




# Add any development tools or experimental features here
# Examples:
# - Additional language servers for neovim
# - Extra debugging tools
# - Development databases
# - Additional programming language runtimes

# Install modern terminal support
USER root
RUN apt-get update && apt-get install -y \
    ncurses-term \
    kitty-terminfo

# Install Ghostty terminfo (if available) and other modern terminal definitions
RUN mkdir -p /usr/share/terminfo/x && \
    # Try to fetch Ghostty terminfo if available
    (curl -fsSL https://raw.githubusercontent.com/ghostty-org/ghostty/main/terminfo/ghostty.terminfo 2>/dev/null | tic -x - || true) && \
    # Also ensure we have good fallbacks
    echo "# Terminal compatibility" >> /etc/bash.bashrc && \
    echo "if [[ \"\$TERM\" == \"xterm-ghostty\" ]] && ! infocmp xterm-ghostty >/dev/null 2>&1; then" >> /etc/bash.bashrc && \
    echo "    export TERM=xterm-256color" >> /etc/bash.bashrc && \
    echo "fi" >> /etc/bash.bashrc

USER developer


# Set up Claude YOLO config for container environment (experimental)
# This allows Claude to run without permission checks in the container
RUN mkdir -p ~/.config/claude && \
    echo '{\
  "permissions": {\
    "yolo": true,\
    "allow": ["*"],\
    "deny": []\
  },\
  "env": {\
    "CLAUDE_MODE": "container",\
    "CLAUDE_CONTAINER": "true"\
  }\
}' > ~/.config/claude/settings.json && \
    echo "Claude configured in YOLO mode for container development"

# Add claude to PATH properly
ENV PATH="/home/linuxbrew/.linuxbrew/bin:${PATH}"

# Simple approach: just ensure directories exist for mounting
# Auth will be mounted directly from host

# Configure shell to use container prompt
RUN echo '# Docker container prompt setup' >> ~/.zshrc && \
    echo '[ -f /etc/profile.d/container-prompt.sh ] && source /etc/profile.d/container-prompt.sh' >> ~/.zshrc && \
    echo '# Docker container prompt setup' >> ~/.bashrc && \
    echo '[ -f /etc/profile.d/container-prompt.sh ] && source /etc/profile.d/container-prompt.sh' >> ~/.bashrc


WORKDIR /home/developer/
#
# Update the repos
# Clone the main repos


RUN cd ~/gits && \
    for repo in */; do \
        if [ -d "$repo/.git" ]; then \
            echo "Updating $repo"; \
            cd "$repo" && git fetch && git rebase && cd ..; \
        fi; \
    done
