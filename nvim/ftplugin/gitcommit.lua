-- Custom folding for Git commit messages in Neovim

-- Set folding options
vim.opt_local.foldmethod = "expr"
vim.opt_local.foldexpr = "v:lua.git_commit_fold_expr(v:lnum)"
vim.opt_local.foldtext = "v:lua.git_commit_fold_text()"
vim.opt_local.foldenable = false
vim.opt_local.foldlevel = 2
vim.opt_local.foldcolumn = "2"

-- Initialize folding mode
vim.b.folding_mode = vim.b.folding_mode or "default"

-- Define the fold expression function
function _G.git_commit_fold_expr(lnum)
  local line = vim.fn.getline(lnum)
  
  -- Start a fold at the beginning of the file if it contains a generated message
  if lnum == 1 and line:match("^commit message generated by") then
    return ">1"
  end
  
  -- Start a fold after the previous commit message
  if vim.fn.getline(lnum - 1):match("^commit message generated by") then
    return ">1"
  end
  
  -- End the fold after the "commit message generated by" line
  if line:match("^commit message generated by") then
    return "1"
  end
  
  -- Continue the fold for lines within a commit message
  if vim.fn.foldclosed(lnum - 1) ~= -1 then
    return "1"
  end
  
  -- Don't fold non-comment lines (the actual commit message)
  return "0"
end

-- Define the fold text function
function _G.git_commit_fold_text()
  local fold_start = vim.v.foldstart
  local fold_end = vim.v.foldend
  local fold_size = fold_end - fold_start + 1
  
  -- Check if this fold contains a "commit message generated by" line
  for i = fold_start, fold_end do
    local line = vim.fn.getline(i)
    if line:match("^commit message generated by") then
      local model_name = line:match("generated by (.+) in")
      local time_taken = line:match("in (.+) seconds")
      if model_name and time_taken then
        return "▶ " .. model_name .. " in " .. time_taken .. " seconds (" .. fold_size .. " lines)"
      end
    end
  end
  
  -- Format for conventional commit messages (likely from LLMs)
  local line = vim.fn.getline(fold_start)
  if line:match("^feat") or line:match("^fix") or 
     line:match("^chore") or line:match("^docs") or 
     line:match("^style") or line:match("^refactor") or 
     line:match("^perf") or line:match("^test") or 
     line:match("^build") or line:match("^ci") or 
     line:match("^revert") then
    
    local commit_type = line:match("^(%w+)")
    local commit_scope = line:match("%(([^)]+)%)")
    local commit_msg = line:match("): (.+)")
    
    if commit_scope and commit_msg then
      return "▶ " .. commit_type .. "(" .. commit_scope .. "): " .. commit_msg .. " (" .. fold_size .. " lines)"
    else
      return "▶ " .. line .. " (" .. fold_size .. " lines)"
    end
  end
  
  -- Extract the section name for comment sections
  if line:match("^# [%a%s]+ ") or 
     line:match("^# Changes ") or 
     line:match("^# Untracked ") or 
     line:match("^# Your branch ") or 
     line:match("^# On branch ") or 
     line:match("^# Not currently ") or 
     line:match("^# Unmerged ") then
    local section = line:match("^# (.+)")
    return "▶ " .. section .. " (" .. fold_size .. " lines)"
  else
    -- For other comment sections
    return "▶ Git comments (" .. fold_size .. " lines)"
  end
end

-- Function to safely create a manual fold
function _G.create_manual_fold(start_line, end_line)
  -- Save the current foldmethod
  local current_foldmethod = vim.opt_local.foldmethod:get()
  
  -- Set foldmethod to manual temporarily
  vim.opt_local.foldmethod = "manual"
  
  -- Create the fold
  local success, err = pcall(function()
    vim.cmd(start_line .. "," .. end_line .. "fold")
  end)
  
  -- Restore the original foldmethod
  vim.opt_local.foldmethod = current_foldmethod
  
  return success
end

-- Function to fold LLM-generated commit messages
function _G.fold_llm_commit_messages()
  -- Set the folding mode to LLM
  vim.b.folding_mode = "llm"
  
  -- Refresh folding
  vim.opt_local.foldmethod = "manual"
  vim.cmd("normal! zE")
  vim.opt_local.foldmethod = "expr"
  
  -- Fold all sections
  vim.cmd("normal! zM")
  
  -- Unfold the first commit message
  _G.unfold_first_commit_message()
  
  print("LLM commit message folding applied")
end

-- Function to unfold the first commit message
function _G.unfold_first_commit_message()
  -- Go to the beginning of the file
  vim.cmd("normal! gg")
  
  -- First try to find a line with "commit message generated by"
  local first_llm_line = vim.fn.search("^commit message generated by", "W")
  
  if first_llm_line == 0 then
    -- If not found, look for conventional commit format
    vim.cmd("normal! gg")
    local first_commit_line = vim.fn.search("^feat\\|^fix\\|^chore\\|^docs\\|^style\\|^refactor\\|^perf\\|^test\\|^build\\|^ci\\|^revert", "W")
    
    if first_commit_line > 0 then
      -- Found a conventional commit message
      -- Unfold everything first
      vim.cmd("normal! zR")
      
      -- Go to the first line
      vim.fn.cursor(1, 1)
      
      -- Find the second commit message if it exists
      local save_pos = vim.fn.getcurpos()
      local second_commit_line = vim.fn.search("^feat\\|^fix\\|^chore\\|^docs\\|^style\\|^refactor\\|^perf\\|^test\\|^build\\|^ci\\|^revert", "W", 0, 2)
      
      if second_commit_line > 0 then
        -- Fold from the second commit message onwards using our safe function
        _G.create_manual_fold(second_commit_line, vim.fn.line("$"))
      end
      
      -- Restore position to the beginning
      vim.fn.setpos(".", save_pos)
    end
  else
    -- Found a line with "commit message generated by"
    -- Go to the beginning of the file
    vim.cmd("normal! gg")
    
    -- Unfold everything
    vim.cmd("normal! zR")
    
    -- If there's content before the first LLM marker, keep it unfolded
    if first_llm_line > 1 then
      -- Find the start of the content for this marker
      local content_start = first_llm_line
      -- Look backward to find the start of the content
      for i = first_llm_line - 1, 1, -1 do
        local line = vim.fn.getline(i)
        if line:match("^$") or line:match("^#") then
          -- Empty line or comment line marks the boundary
          content_start = i + 1
          break
        end
        content_start = i
      end
      
      -- If this is the first message, don't fold it
      if content_start == 1 then
        -- Find the next marker if it exists
        local next_marker = vim.fn.search("^commit message generated by", "W", 0, 2)
        if next_marker > 0 then
          -- Fold from the next marker onwards
          _G.create_manual_fold(next_marker, vim.fn.line("$"))
        end
      else
        -- Fold from the content start onwards
        _G.create_manual_fold(content_start, vim.fn.line("$"))
      end
    else
      -- The marker is at line 1, fold from there
      _G.create_manual_fold(first_llm_line, vim.fn.line("$"))
    end
  end
end

-- Function to safely open a fold if it exists
function _G.safe_open_fold()
  -- Go to the beginning of the file
  vim.cmd("normal! gg")
  
  -- Check if there's a fold at the current position
  local has_fold = vim.fn.foldlevel(vim.fn.line('.')) > 0
  
  -- Only try to open the fold if one exists
  if has_fold then
    pcall(function() vim.cmd("normal! zo") end)
  end
end

-- Add key mappings for folding
vim.api.nvim_buf_set_keymap(0, "n", "<Tab>", "za", {noremap = true, silent = true})
vim.api.nvim_buf_set_keymap(0, "n", "<S-Tab>", "zM", {noremap = true, silent = true})

-- Set other useful options for commit messages
vim.opt_local.spell = true
vim.opt_local.textwidth = 72
vim.opt_local.colorcolumn = "+1"

-- Create an autocommand group for Git commit folding
local augroup = vim.api.nvim_create_augroup("GitCommitFoldingLua", {clear = true})

-- Automatically fold comments when opening the commit message
vim.api.nvim_create_autocmd("BufWinEnter", {
  pattern = "COMMIT_EDITMSG",
  group = augroup,
  callback = function()
    -- Set folding options
    vim.opt_local.foldmethod = "expr"
    vim.opt_local.foldexpr = "v:lua.git_commit_fold_expr(v:lnum)"
    vim.opt_local.foldtext = "v:lua.git_commit_fold_text()"
    
    -- Initialize folding mode
    vim.b.folding_mode = "default"
    
    -- Fold all comment sections by default
    vim.cmd("normal! zM")
    
    -- Try to safely open the first fold if it exists
    _G.safe_open_fold()
  end,
})

-- Create command to apply LLM folding
vim.api.nvim_create_user_command("FoldLLM", function()
  _G.fold_llm_commit_messages()
end, {
  desc = "Fold LLM-generated commit messages"
})

-- Define a custom highlight group for the entire line
vim.cmd("highlight CommitGeneratedLine guifg=#FFD700 gui=bold")

-- Define a custom highlight group for the model name and time
vim.cmd("highlight CommitModelTime guifg=#FFD700 gui=bold,underline")

-- Apply the highlight to the "commit message generated by" line
vim.api.nvim_create_autocmd("BufReadPost", {
  pattern = "COMMIT_EDITMSG",
  callback = function()
    -- Highlight the entire line
    vim.fn.matchadd("CommitGeneratedLine", "^commit message generated by .+ in .+ seconds$")
    
    -- Highlight the model name and time separately
    vim.fn.matchadd("CommitModelTime", "generated by \\zs\\S\\+\\ze in \\d+\\.\\d+ seconds")
  end,
}) 