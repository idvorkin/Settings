" Common  things in all of my vimrc's
"  File in git:  ~/gits/settings/default_vimrc
set nocompatible
set nohls
set ignorecase
set noincsearch
set guioptions-=T
set guioptions-=m
" Remove right hand scroll bars
set guioptions-=R
set guioptions-=r
set sw=4
set ts=4
set expandtab
set cindent
set laststatus=2
runtime macros/matchit.vim
syntax  on
:ca lcdb lcd %:p:h

set tags=tags;/

" TPS crap.
" find number in a line of xml.
:cab only_number %s;.*>\(\d\+.\d\+\)<.*;\1;g
:cab to_excel  %s;\( \\|,\);\t;g

function! FixCallStacks()
    :%s;\[NLN\];\r;g
    :%s;\[TAB\];\t;g
endfunction

function! StripPerfCounterTags()
    %s;\(\\.*\)<.*>;\1;
    %s;<.*>;;
endfunction

function! FixMojiBake()
    " See charector under cursor -
    "   ga
    " Search for non unicode charecters
    " /[^\x00-\x7F]

    " Replace hypens
	:%s/\%x97/-/g
	:%s/\%x96/-/g

    " Replace smart quotes
	:%s/\%x93/"/g
	:%s/\%x94/"/g

    " Remove TMs and oes
	:%s/\%x99//g
	:%s/\%x9c//g
	:%s/\%x9d//g
    "

    " Replace apostrophe
	:%s/\%x92/'/g
    " Replace apostrophe in bear
	:%s/\%xe2\%x80/'/g
endfunction

function! FirstPersonToThirdPerson()

    " Trim the whitespace off the ends
    :%s;\s\+$;;

    " Add a period to the end if it's not there.
    :g!/\.$/s;$;.;

    " do a bunch of replaces.
    :%s;^I;You;
    :%s;\. ^I;You;g
    :%s; I ; you ;g
    :%s; am ; are ;g
    :%s; me\([ \.,$]\); you\1;g
    :%s; me\([ \.,$]\); you\1;g
    :%s; mine\([ \.,$]\); yours\1;g
    :%s;^Me ;You ;g
    :%s; myself\([ \.,$]\); yourself\1;g
    :%s; my ; your ;g
    :%s;^My ;Your ;g
    :%s;^\.$;
endfunction

"  Vundle setup
    " Instructions @  https://github.com/VundleVim/Vundle.vim/blob/master/README.md
    " git clone https://github.com/VundleVim/Vundle.vim %USERPROFILE%/vimfiles/bundle/vundle
    " MAC - $ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
    filetype off
    set rtp+=~/vimfiles/bundle/Vundle
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()

    Bundle 'VundleVim/Vundle.vim'
    Bundle 'mattn/webapi-vim'
    Bundle 'tpope/vim-fugitive'

    "
    " Writing tools
    Bundle 'Ron89/thesaurus_query.vim'
    "
    :noremap  <Leader>tr :ThesaurusQueryReplaceCurrentWord<CR>

    Bundle 'junegunn/limelight.vim'
    Bundle 'reedes/vim-pencil'
    Bundle 'junegunn/goyo.vim'
    Bundle 'inkarkat/vim-ingo-library'
    Bundle 'inkarkat/vim-spellcheck'

    Bundle 'leafgarland/typescript-vim'
    Bundle 'nathanaelkane/vim-indent-guides'

    Bundle 'mhinz/vim-startify'
    Bundle 'tpope/vim-surround'
    Bundle 'bling/vim-airline'
    Bundle 'chrisbra/csv.vim'
    Bundle 'altercation/vim-colors-solarized'
    Bundle 'vim-scripts/ZoomWin'
    "
    " change font size \\++
    Bundle 'drmikehenry/vim-fontsize'


    " Markdown stuff
    " *******************************
    Bundle 'godlygeek/tabular'
    Bundle 'mzlogin/vim-markdown-toc'
    " :GenTocGFM
    " :UpdateToc

    Bundle 'plasticboy/vim-markdown'
    " :TOC - Generate a toc sidebar
    " ]] Next Header
    " [[ Prev Header
    Bundle 'tpope/vim-liquid'
    Bundle 'parkr/vim-jekyll'
    Bundle 'christoomey/vim-quicklink'

    Bundle 'elzr/vim-json'
    Bundle 'PProvost/vim-ps1'
    Bundle 'othree/javascript-libraries-syntax.vim'
    Bundle "pangloss/vim-javascript"
    Bundle "scrooloose/nerdtree"
    Bundle "rking/ag.vim"
    Bundle "OrangeT/vim-csharp.git"
    Bundle "lukaszkorecki/workflowish"
    Bundle "keith/swift.vim"
    " http://vimcolors.com/?page=11
    Bundle 'flazz/vim-colorschemes'
    Bundle 'dhruvasagar/vim-table-mode'
    Bundle 'atelierbram/vim-colors_atelier-schemes'
    " Comment \cc
    " Uncomment \cu
    Bundle 'scrooloose/nerdcommenter'

    " I use this instead of FZF or Ctrl-P
    Bundle 'Shougo/denite.nvim'
    Bundle 'Shougo/neomru.vim'

    " PymodeLintAuto
    Plugin 'python-mode/python-mode'
    let g:pymode_python = 'python3'
    let g:pymode_options_colorcolumn = 0
    let g:pymode_options_max_line_length = 88
    let g:pymode_lint_options_pep8 =
        \ {'max_line_length': g:pymode_options_max_line_length}
    let g:pymode_lint_options_pylint =
        \ {'max-line-length': g:pymode_options_max_line_length}


    " Plugin 'plytophogy/vim-virtualenv'
    " black needs virtual env, which can't find
    " Plugin 'ambv/black'
    " Write on Save
    " autocmd BufWritePost *.py execute ':Black'


    Plugin 'kchmck/vim-coffee-script'
    Plugin 'aklt/plantuml-syntax'
    Plugin 'scrooloose/vim-slumlord'

    " Plugin 'airblade/vim-gitgutter'
    Plugin 'mhinz/vim-signify'

    " ]c -> Next hunk
    " ]c -> Prev hunk

    " Replace syntastic with ale
    " Bundle 'scrooloose/syntastic'
    " Plugin 'w0rp/ale'

    " Ale for prose requires
    " write-good
    " prose-lint
    " vale
    Plugin 'danro/rename.vim'

    " Plugin 'easymotion/vim-easymotion'
    " All of your Plugins must be added before the following line

    Plugin 'PolyCement/vim-tweego'
call vundle#end()            " required


" Setup Denite
    :cab ls :Denite buffer
    :nnoremap <C-P> :Denite file buffer file_mru directory_mru<cr>
    " Open file/directory recursive (can be slow)
    :cab FR :Denite -start-insert file file_mru directory_mru file_rec
    call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>', 'noremap')
    call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
    call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>', 'noremap')
    call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')

" End Setup

filetype plugin indent on    " required

" Set font-size default to be a decent size.
if ( has("win32") || has("win64") || has("win16") )
    if !exists("g:loaded")
        " TBD: Setting the guifont causes the window to move, so only set the
        " guifont if it hasn't been set before.
        let defaultFont="Consolas:h14"
        let g:loaded=1
        exec "set guifont=".defaultFont
    endif
endif
"
"WOFL Helpers
" HELP @ https://github.com/lukaszkorecki/workflowish"

func! OneNoteToWafl()
    " Tabs to spaces
    %s;\t;  ;g
    " Dots to *'s
    %s/\%u2022/*/g
    %s/\%u25cb/*/g
    %s/\%u00b7/*/g
endfunc

func! WriteOn()
    :Goyo
    :PencilSoft
    :Limelight
    " :ALEDisable " Remove spelling and grammer
endfunc
command! IGWriteOn :call WriteOn()
command! IGWriteOff :call WriteOff()

func! WriteOff()
    :Goyo
    :PencilOff
    :Limelight!
    " :ALEEnable "Remove spelling and grammer
endfunc


" TBD  Checkbox processing
"   add these only to markdown/html; checkboxopen, checkboxdone
"   Perhaps be clever and alternate between open and done like in OneNote via C-1
"
:iab _mc_ &#x2610;
:iab _mcd_ &#x2611;

func! MarkDownWordToLink()
    " cool yiw takes the word, and jumps you to the beginning of it.
    normal yiwi[ea](http://www.pa.com)
endfunc

func! JsToSingleLineClipBoard()
    " Creating a bookmarklet requires all JS to be on a single line.
    " Make it a single line and put it on global clipboard to paste into JS
    " console.

    " NOTE: when creating bookmarklets, you'll need to terminate all lines
    " with a ';' and only use inline comments, and end with void();

    " NOTE: when making it the bookmark, you need to start with javascript:

    " Join all to one line.
    exec ":%j"
    " Copy to Clipboard
    normal "*yy
    " Undo
    normal u
    `
endfunc

if $TERM_PROGRAM =~ "iTerm"
    " No idea what these first two things are for - seem to be something
    " only needed in tmux (as opposed to just iTerm) - Groan, what a mess.
    " http://www.linuxquestions.org/questions/slackware-14/tip-24-bit-true-color-terminal-tmux-vim-4175582631/
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif

let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors

" Other schemes I liek
"
if has ("gui-running")
    :colo Tomorrow-Night-Blue
else
    :colo darkblue
endif

" Remove trailing whitespace:
autocmd BufWritePre * :%s/\s\+$//e



" Markdown
"  ToC - Sidebar to navigate.
"  ][  - sibling prev
"  []  - sibling next
let g:vim_markdown_frontmatter = 1
set conceallevel=2
let g:vim_markdown_new_list_item_indent = 0
let g:vim_markdown_folding_level = 4
let g:vim_markdown_folding_level = 4

" Jekyll  - posts for use with JPost
" JVPost -  create jekyll post in new vertical split
let g:jekyll_post_extension = '.md'
    let g:jekyll_post_template =  [
      \ '---',
      \ 'layout: post',
      \ 'title: "JEKYLL_TITLE"',
      \ 'date: "JEKYLL_DATE"',
      \ 'tags:',
      \ '  - ',
      \ '---',
      \ ]

let g:jekyll_post_dirs = ['_posts', '../_posts','_drafts','../_drafts']

function! EscapeKey()
    " Do mappings for funny keyboard
    :inoremap ` <esc>
    :inoremap C-` `
    :cnoremap ` <esc>
    :cnoremap C-` `
endfunction

function! FixEscapeKey()
    :call EscapeKey()
endfunction


:py3file ~/settings/vim_python.py
command! IGDaily :py3 MakeDailyPage()

" vim:foldmethod=indent:
