" Common  things in all of my vimrc's
"  File in git: ~/gits/settings/default_vimrc
set nocompatible
set nohls
set ignorecase
set noincsearch
set guioptions-=T
set guioptions-=m
" Remove right hand scroll bars
set guioptions-=R
set guioptions-=r
set sw=4
set ts=4
set expandtab
set cindent
set laststatus=2
runtime macros/matchit.vim
syntax  on
:ca lcdb lcd %:p:h

set tags=tags;/


" OMG - How to support italics in vim in TMUX
" https://rsapkf.netlify.com/blog/enabling-italics-vim-tmux

function! FixCallStacks()
    :%s;\[NLN\];\r;g
    :%s;\[TAB\];\t;g
endfunction

function! StripPerfCounterTags()
    %s;\(\\.*\)<.*>;\1;
    %s;<.*>;;
endfunction

function! FixMojiBake()
    " See charector under cursor -
    "   ga
    " Search for non unicode charecters
    " /[^\x00-\x7F]

    " Replace hypens
	:%s/\%x97/-/g
	:%s/\%x96/-/g

    " Replace smart quotes
	:%s/\%x93/"/g
	:%s/\%x94/"/g

    " Remove TMs and oes
	:%s/\%x99//g
	:%s/\%x9c//g
	:%s/\%x9d//g
    "

    " Replace apostrophe
	:%s/\%x92/'/g
    " Replace apostrophe in bear
	:%s/\%xe2\%x80/'/g
endfunction

function! FirstPersonToThirdPerson()

    " Trim the whitespace off the ends
    :%s;\s\+$;;

    " Add a period to the end if it's not there.
    :g!/\.$/s;$;.;

    " do a bunch of replaces.
    :%s;^I;You;
    :%s;\. ^I;You;g
    :%s; I ; you ;g
    :%s; am ; are ;g
    :%s; me\([ \.,$]\); you\1;g
    :%s; me\([ \.,$]\); you\1;g
    :%s; mine\([ \.,$]\); yours\1;g
    :%s;^Me ;You ;g
    :%s; myself\([ \.,$]\); yourself\1;g
    :%s; my ; your ;g
    :%s;^My ;Your ;g
    :%s;^\.$;
endfunction

function! SetupPlugins()
"  Vundle setup
    " Instructions @  https://github.com/VundleVim/Vundle.vim/blob/master/README.md
    " git clone https://github.com/VundleVim/Vundle.vim %USERPROFILE%/vimfiles/bundle/vundle
    " MAC - $ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
    filetype off
    set rtp+=~/vimfiles/bundle/Vundle
    set rtp+=~/.vim/bundle/Vundle.vim

    if filereadable(expand("~/homebrew/opt/fzf/plugin/fzf.vim"))
        so ~/homebrew/opt/fzf/plugin/fzf.vim
        " set rtp+=/usr/local/opt/fzf/plugin/
    endif

    call vundle#begin()

    Plugin 'frazrepo/vim-rainbow' " # :RainbowToggle
    Plugin 'fcpg/vim-osc52'
    Bundle 'VundleVim/Vundle.vim'
    Bundle 'jparise/vim-graphql'
    Bundle 'webdevel/tabulous'
    Bundle 'r0mai/vim-djinni'
    Bundle 'mattn/webapi-vim'
    Bundle 'majutsushi/tagbar'

    Bundle 'tpope/vim-fugitive'

    " Bundle for Mercurial
    Bundle 'ludovicchabant/vim-lawrencium'
    Bundle 'aserebryakov/vim-todo-lists'
    " Open todo file.
    let g:VimTodoListsMoveItems = 0
    let g:VimTodoListsDatesEnabled = 1
    let g:VimTodoListsDatesFormat = "%a %b %d, %Y"

    "
    " Writing tools
    Bundle 'Ron89/thesaurus_query.vim'
    "
    :noremap  <Leader>tr :ThesaurusQueryReplaceCurrentWord<CR>

    Bundle 'junegunn/limelight.vim'
    Bundle 'reedes/vim-pencil'
    Bundle 'junegunn/goyo.vim'
    Bundle 'inkarkat/vim-ingo-library'
    Bundle 'inkarkat/vim-spellcheck'
    Bundle 'panozzaj/vim-autocorrect'

    Bundle 'leafgarland/typescript-vim'

    " :IndentGuidesEnable
    " :IndentGuidesDisable
    " :IndentGuidesToggle
    Bundle 'nathanaelkane/vim-indent-guides'

    Bundle 'mhinz/vim-startify'
    Bundle 'tpope/vim-surround'
    Bundle 'bling/vim-airline'
    Bundle 'chrisbra/csv.vim'
    Bundle 'altercation/vim-colors-solarized'
    Bundle 'vim-scripts/ZoomWin'
    "
    " change font size \\++
    Bundle 'drmikehenry/vim-fontsize'


    " Markdown stuff
    " *******************************
    Bundle 'godlygeek/tabular'
    Bundle 'mzlogin/vim-markdown-toc'

    " Still too early and slow
    " Bundle 'SidOfc/mkdx'

    " :GenTocGFM
    " :UpdateToc

    Bundle 'plasticboy/vim-markdown'
    " :TOC - Generate a toc sidebar
    " :VSize - Resize to 20
    " ]] Next Header
    " [[ Prev Header
    Bundle 'parkr/vim-jekyll'
    Bundle 'christoomey/vim-quicklink'

    Bundle 'elzr/vim-json'
    Bundle 'PProvost/vim-ps1'
    Bundle 'othree/javascript-libraries-syntax.vim'
    Bundle "pangloss/vim-javascript"
    Bundle "scrooloose/nerdtree"
    Bundle "rking/ag.vim"
    Bundle "OrangeT/vim-csharp.git"
    " OmniSharp doesn't seem to wrok on WSL, let it go.
    " Bundle "OmniSharp/omnisharp-vim"
    Bundle "lukaszkorecki/workflowish"
    Bundle "keith/swift.vim"
    " http://vimcolors.com/?page=11
    Bundle 'flazz/vim-colorschemes'
    Bundle 'dhruvasagar/vim-table-mode'
    Bundle 'atelierbram/vim-colors_atelier-schemes'
    " Comment \cc
    " Uncomment \cu
    Bundle 'scrooloose/nerdcommenter'

    " I use this instead of FZF or Ctrl-P
    "Bundle 'Shougo/denite.nvim'
    "Bundle 'Shougo/neomru.vim'
    Bundle 'roxma/nvim-yarp'
    Bundle 'roxma/vim-hug-neovim-rpc'

    " Trying to use fzf cz it looks awesome.
    Plugin 'junegunn/fzf.vim'


    " PymodeLintAuto
    Plugin 'python-mode/python-mode'
    let g:pymode_python = 'python3'
    let g:pymode_options_colorcolumn = 0
    let g:pymode_options_max_line_length = 120
    let g:pymode_lint_options_pep8 =
        \ {'max_line_length': g:pymode_options_max_line_length}
    let g:pymode_lint_options_pylint =
        \ {'max-line-length': g:pymode_options_max_line_length}


    " Plugin 'plytophogy/vim-virtualenv'
    " black needs virtual env, which can't find
    " Plugin 'ambv/black'
    " Write on Save
    " autocmd BufWritePost *.py execute ':Black'


    Plugin 'kchmck/vim-coffee-script'
    Plugin 'aklt/plantuml-syntax'
    Plugin 'scrooloose/vim-slumlord'

    Plugin 'mhinz/vim-signify' " Not sure why but gitgutter doesn't display the signs correctly, disable that and use signify for line highlight
    " \hp -> Preview hunk
    " \hu -> Undo Hunk
    :nmap <leader>hu :SignifyHunkUndo<cr>
    :nmap <leader>hp :SignifyHunkDiff<cr>
    " ]c -> Next hunk
    " ]c -> Prev hunk
    " \hp -> Preview hunk
    " \hu -> Undo Hunk

    " Plugin 'airblade/vim-gitgutter'
    let g:gitgutter_signs=0

    " ]c -> Next hunk
    " ]c -> Prev hunk
    " \hp -> Preview hunk
    " \hu -> Undo Hunk
    " :GitGutterFold
    " :GitGutterEnable
    " let g:gitgutter_set_sign_backgrounds=1
    " :highlight! link SignColumn LineNr
    " :highlight SignColumn guibg='blue' ctermbg='blue'
	" :highlight SignColumn ctermbg='DarkRed'
    " let g:gitgutter_preview_win_floating=1

    " Replace syntastic with ale
    " Bundle 'scrooloose/syntastic'
    " disable Ale for now as it's mucking my table of contents.
    " Plugin 'w0rp/ale'
    Plugin 'prettier/vim-prettier'

    " Ale for prose requires
    " write-good
    " prose-lint
    " vale
    Plugin 'lgalke/vim-compiler-vale'

    Plugin 'danro/rename.vim'
    " Plugin 'easymotion/vim-easymotion'
    " All of your Plugins must be added before the following line

    Plugin 'PolyCement/vim-tweego'

    " coc and friends, too complex so far
    " Plugin 'neoclide/coc.nvim', {'branch': 'release'}

    " \r - rename
    " \n - usages
    " K - help
    Plugin 'davidhalter/jedi-vim'



    call vundle#end()            " required
endfunc

call SetupPlugins()



" Setup Fzf
func FzFConfig()
    :cab ls :Buffers<CR>
    :nmap g* :exec ":Lines '" expand('<cword>')<CR>

    " Ahh, FZF, how complex you are:

    " using fd as the source for fzf
    command! -bang -complete=dir -nargs=* FF
    \ call fzf#run(fzf#wrap('ff', {'source': 'fd --follow . ~/blog', 'dir':<q-args>,'sink':'e'}, <bang>0))

    :cab ff FF<CR>
    " Some FZF  help
    " typing = fuzzy match
    " 'actual match
    " $end
    " ^start
    " | or :w
    "

    :nnoremap <C-P> :History<cr>
    :nnoremap <C-O> :FF<cr>
    :nnoremap <C-I> :BTags<cr>

endfunc
call FzFConfig()

func SetupAutoFixEnglish()
    " Can fix with Sed
    " sed -i -e 's/ teh / the /g' *
    " grab these from .aspell.en.prepl
     :iab teh the
     :iab hte the
     :iab taht that
     :iab ot to
     :iab hte the
     :iab zach Zach
     :iab alot a lot
     :iab amelia Amelia
     :iab tori Tori
     :iab ammon Ammon
     :iab adn and
     :iab nad and
     :iab cna can
     :iab dont don't
     :iab   fi if
     :iab   fo of
     :iab iwll will
     :iab wiht with
    :iab htgorugh through
    :iab htis this
    :iab htourhg through
endfunc

call SetupAutoFixEnglish()



filetype plugin indent on    " required

" Set font-size default to be a decent size.
if ( has("win32") || has("win64") || has("win16") )
    if !exists("g:loaded")
        " TBD: Setting the guifont causes the window to move, so only set the
        " guifont if it hasn't been set before.
        let defaultFont="Consolas:h14"
        let g:loaded=1
        exec "set guifont=".defaultFont
    endif
endif
"
"WOFL Helpers
" HELP @ https://github.com/lukaszkorecki/workflowish"

func! OneNoteToWafl()
    " Tabs to spaces
    %s;\t;  ;g
    " Dots to *'s
    %s/\%u2022/*/g
    %s/\%u25cb/*/g
    %s/\%u00b7/*/g
endfunc

func! WriteOn()
    :Goyo
    :PencilSoft
    :Limelight
    " :ALEDisable " Remove spelling and grammer
endfunc
command! IGWriteOn :call WriteOn()
command! IGWriteOff :call WriteOff()

func! WriteOff()
    :Goyo
    :PencilOff
    :Limelight!
    " :ALEEnable "Remove spelling and grammer
endfunc


" TBD  Checkbox processing
"   add these only to markdown/html; checkboxopen, checkboxdone
"   Perhaps be clever and alternate between open and done like in OneNote via C-1
" Using digraphs - so cool
" C-K  9744 // Checkmark complete
" C-K  9745 // Checkmark open
" https://www.fileformat.info/info/unicode/char/2611/index.htm
" :dig td 9744
" :dig tc 9745

:iab mdt ‚òê
:iab mdtd ‚òê
:iab mdc ‚òë
:iab mdtodo ‚òê
:iab mddone  ‚òë
:cab mdcbt g/^#/s;# \*\*\(.*\)\*\*;# \1;

func! MarkDownWordToLink()
    " cool yiw takes the word, and jumps you to the beginning of it.
    normal yiwi[ea](http://www.pa.com)
endfunc

func! MarkDownClearBoldTitles()
":cab mdcbt g/^#/s;# \*\*\(.*\)\*\*;# \1;"
endfunc


func! MarkDownWordToGoogleLucky()
    " cool yiw takes the word, and jumps you to the beginning of it.
    normal yiwi[ea](http://www.google.com/search?btnI&q=)hp
endfunc

func! JsToSingleLineClipBoard()
    " Creating a bookmarklet requires all JS to be on a single line.
    " Make it a single line and put it on global clipboard to paste into JS
    " console.

    " NOTE: when creating bookmarklets, you'll need to terminate all lines
    " with a ';' and only use inline comments, and end with void();

    " NOTE: when making it the bookmark, you need to start with javascript:

    " Join all to one line.
    exec ":%j"
    " Copy to Clipboard
    normal "*yy
    " Undo
    normal u
    `
endfunc

" Assume no longer need these - put back if you do.
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors

if has ("gui-running")
    :colo Tomorrow-Night-Blue
else
    :colo darkblue
endif

" Remove trailing whitespace:
autocmd BufWritePre * :%s/\s\+$//e

" Markdown
"  ToC - Sidebar to navigate.
"  ][  - sibling prev
"  []  - sibling next

let g:vim_markdown_follow_anchor = 1 " ge will jump to anchor (TBD: Map to C-]
let g:vim_markdown_toc_autofit = 1 " Great for not wasting extra space
let g:vim_markdown_frontmatter = 1
set conceallevel=2
let g:vim_markdown_new_list_item_indent = 0
let g:vim_markdown_folding_level = 4
let g:vmt_list_item_char='-'

" Always enable softpencil

autocmd BufEnter *md :exe ":compiler vale"
autocmd BufEnter *md :exe ":SoftPencil"
autocmd BufEnter *md :exe ":call AutoCorrect()"
" autocmd BufEnter *md :exe ":Limelight"
" autocmd BufLeave *md :exe ":Limelight!"
" let g:vim_markdown_folding_disabled = 1

" Break lines on word boudnaries only
set linebreak


" Jekyll  - posts for use with JPost
" JVPost -  create jekyll post in new vertical split
let g:jekyll_post_extension = '.md'
    let g:jekyll_post_template =  [
      \ '---',
      \ 'layout: post',
      \ 'title: "JEKYLL_TITLE"',
      \ 'date: "JEKYLL_DATE"',
      \ 'tags:',
      \ '  - ',
      \ '---',
      \ ]


let g:jekyll_post_dirs = ['_posts', '../_posts','_drafts','../_drafts']


function! EscapeKey()
    " Do mappings for funny keyboard
    :inoremap ` <esc>
    :inoremap C-` `
    :cnoremap ` <esc>
    :cnoremap C-` `
endfunction

function! FixEscapeKey()
    :call EscapeKey()
endfunction

let g:ale_fixers = {
            \   'javascript': ['prettier'],
            \   'css': ['prettier'],
            \   'markdown': ['prettier'],
            \}

" let g:ale_fix_on_save = 1
" Scripting reference
" https://devhints.io/vimscript
:py3file ~/settings/vim_python.py
command! IGDaily :py3 MakeDailyPage()
command! IGYesterday :py3 MakeDailyPage(-1)
command! IGWeekly :py3 MakeWeeklyReport()
cab Ddt !python3 ~/gits/linqpadsnippets/python/dump_grateful.py todo --markdown
cab Ddg !python3 ~/gits/linqpadsnippets/python/dump_grateful.py grateful
cab Dda !python3 ~/gits/linqpadsnippets/python/dump_grateful.py awesome
command! Sodot :so ~/.vimrc
command! Soed :n ~/settings/default_vimrc
command! VSize :vert resize 20
command! IgTodo :r !python3 ~/gits/linqpadsnippets/python/dump_grateful.py todo --markdown 2
command! IgMdToc :r ~/settings/vim/snip_toc.md
command! Ig2 :lcd ~/gits/igor2/<bar>:GFiles
command! IgBlog :lcd ~/blog/<bar>:GFiles


" Common work flow: Switch to current  directory, git write, commit and push.
cab DdC  :lcd %:p:h<CR>:Gwrite<CR>:!git diff --staged %:p <CR> :!read -k  <CR>:!git commit %:p -m "Save %"<CR>:!git push<CR>

" I never use ToHTML and it makes it harder to use Toc
" This is loaded in the html plugin, which I'm disabling.
" search for the below string to find it.
let g:loaded_2html_plugin = 'vim8.1_v1'
" leaving the below in for an example of one time load only
if  !exists ("g:execute_on_first_load_only")
    " Can only delete it once
    let  g:execute_on_first_load_only = "1"
    ":delc TOhtml
endif

"Auto spell check in aspell.
:cab aspell :w!<CR>:!aspell check %<CR>:e! %<CR>

" I always want the local cd.
:cab Gcd  :Glcd

"  Add alias to regenerate tags for this repo.
"  Using FD honors the .gitignore
:cab GTag  :Glcd<CR>:!ctags `fd md$`

:cab lg  :!lazygit


" Copied from https://gist.github.com/jackkinsella/aa7374a6832cca8a09eadc3434a33c24`
" Automatically reload file when underlying files change (e.g. git)
set autoread


"By default, swap out all instances in a line during substitutions
set gdefault

function SetupTagbar()
    " Update markdown tagbar need to install mdctags
    " https://github.com/wsdjeg/mdctags.rs#installation
    let g:tagbar_left = 1
    let g:tagbar_sort = 0
    let g:tagbar_foldlevel = 99
    let g:tagbar_autoshowtag = 1
    let g:tagbar_compact = 1

    command! TagbarV let g:tagbar_vertical=1|:TagbarOpen
    command! TagbarH let g:tagbar_vertical=0|:TagbarOpen

    let g:tagbar_type_markdown = {
                \ 'ctagsbin'  : 'mdctags',
                \ 'ctagsargs' : '',
                \ 'kinds'     : [
                \     'a:h1:0:0',
                \     'b:h2:0:0',
                \     'c:h3:0:0',
                \     'd:h4:0:0',
                \     'e:h5:0:0',
                \     'f:h6:0:0',
                \ ],
                \ 'sro'        : '::',
                \ 'kind2scope' : {
                \     'a' : 'h1',
                \     'b' : 'h2',
                \     'c' : 'h3',
                \     'd' : 'h4',
                \     'e' : 'h5',
                \     'f' : 'h6',
                \ },
                \ 'scope2kind' : {
                \     'h1' : 'a',
                \     'h2' : 'b',
                \     'h3' : 'c',
                \     'h4' : 'd',
                \     'h5' : 'e',
                \     'h6' : 'f',
                \}
                \}
    endfunc
call SetupTagbar()


function MdBoldToTitle()
    " Strip bold and make it an L4
    " Copy into a macroc
    " 0xx$hhxxxI#### 
    " Copy into the search string
    " Search string for a full line bold
    " /^*\*\(.*\)\*\*$ "
endfunction


func SetupFBSpecific()
"""""""""""""
" FB Specific -- Careful to leak nothing useful.
"""""""""""""

let g:bgdot= "~/fbsource/fbcode/shellconfigs/rc/vim/biggrep.vim"
if filereadable (expand(g:bgdot))
    echo "At Facebook"
    :so  ~/fbsource/fbcode/shellconfigs/rc/vim/biggrep.vim
endif
endfunc
call SetupFBSpecific()

if exists('##TextYankPost')
    augroup BlinkClipboardIntegration
        autocmd!
        " For some reason '*' doesn't show up in the clipboard names, so using
        " 'cy, instead '*y as used expect
        autocmd TextYankPost * if v:event.regname == 'c' | call SendViaOSC52(join(v:event["regcontents"],"\n")) | endif
    augroup END
endif

" MDX is currently unused as it's not ready, lets watch as it develops
" Favorite feature is opening tags in Fzf Window


let g:mkdx#settings     = { 'highlight': { 'enable': 1 },
                        \ 'enter': { 'shift': 1 },
                        \ 'links': { 'external': { 'enable': 1 } },
                        \ 'toc': { 'text': 'Table of Contents', 'update_on_write': 1 },
                        \ 'fold': { 'enable': 1 } }
let g:polyglot_disabled = ['markdown'] " for vim-polyglot users, it loads Plasticboy's markdown
                                       " plugin which unfortunately interferes
                                       " with mkdx list indentation


fun! s:MkdxGoToHeader(header)
    " given a line: '  84: # Header'
    " this will match the number 84 and move the cursor to the start of that line
    call cursor(str2nr(get(matchlist(a:header, ' *\([0-9]\+\)'), 1, '')), 1)
endfun

fun! s:MkdxFormatHeader(key, val)
    let text = get(a:val, 'text', '')
    let lnum = get(a:val, 'lnum', '')

    " if the text is empty or no lnum is present, return the empty string
    if (empty(text) || empty(lnum)) | return text | endif

    " We can't jump to it if we don't know the line number so that must be present in the outpt line.
    " We also add extra padding up to 4 digits, so I hope your markdown files don't grow beyond 99.9k lines ;)
    return repeat(' ', 4 - strlen(lnum)) . lnum . ': ' . text
endfun

fun! s:MkdxFzfQuickfixHeaders()
    " passing 0 to mkdx#QuickfixHeaders causes it to return the list instead of opening the quickfix list
    " this allows you to create a 'source' for fzf.
    " first we map each item (formatted for quickfix use) using the function MkdxFormatHeader()
    " then, we strip out any remaining empty headers.
    let headers = filter(map(mkdx#QuickfixHeaders(0), function('<SID>MkdxFormatHeader')), 'v:val != ""')

    " run the fzf function with the formatted data and as a 'sink' (action to execute on selected entry)
    " supply the MkdxGoToHeader() function which will parse the line, extract the line number and move the cursor to it.
    call fzf#run(fzf#wrap(
                \ {'source': headers, 'sink': function('<SID>MkdxGoToHeader') }
                \ ))
endfun

" finally, map it -- in this case, I mapped it to overwrite the default action for toggling quickfix (<PREFIX>I)
" :nnoremap <silent> <C-U>  :call <SID>MkdxFzfQuickfixHeaders()<Cr>

:nnoremap <silent> <C-Y>  :TagbarOpen fj<cr>

"
" vim:foldmethod=indent:
