" Common  things in all of my vimrc's
"  File in git:  ~/gits/settings/default_vimrc
set nocompatible 
set nohls
set ignorecase
set noincsearch
set guioptions-=T
set guioptions-=m
set sw=4
set ts=4
set expandtab
set cindent
set laststatus=2
runtime macros/matchit.vim
syntax  on 
:ca lcdb lcd %:p:h
" Requires pygments and clippaste.
:ca pyHTML !c:\python25\scripts\pygmentize -O full -l python -f html \| c:\hg\py\misc\clippaste.py - 
:ca reHTML !c:\hg\py\misc\clippaste.py - 

func! ReToClip()
    " Call VST
    :Vst
    " Wait for new window to pop up
    :sleep 1 
    " Copy to clipboard
    :%!c:\hg_resin\py\misc\clippaste.py - 
    " exit
    :q!
endfunc

" from:http://stackoverflow.com/questions/114431/fast-word-count-function-in-vim
" Add wordcount to statuline: 

function! W0rdCount() 
    " Making name a w0rd so not picked up in completion with setWordCountToTitle
    let s:old_status = v:statusmsg
    let position = getpos(".")
    exe "silent normal g\<c-g>"
    if v:statusmsg != '--No lines in buffer--'
        let s:word_count = str2nr(split(v:statusmsg)[11])
        let v:statusmsg = s:old_status
    end 
    call setpos('.', position)
    return s:word_count
endfunction

function! WordCountToTitle()
    exec ":set statusline=wc:%{W0rdCount()}"
endfunction

let g:pyindent_open_paren = '&sw * 2'
let g:pyindent_nested_paren = '&sw'
let g:pyindent_continue = '&sw * 2'


set tags=tags;/

function! TitlePrefix(prefix)
    let  g:TitlePrefix=a:prefix
    :auto! BufEnter * let &titlestring = g:TitlePrefix."||".expand("%:p")
    let &titlestring = g:TitlePrefix."||".expand("%:p")
endfunction

" TPS crap.
" find number in a line of xml.
:cab only_number %s;.*>\(\d\+.\d\+\)<.*;\1;g
:cab to_excel  %s;\( \\|,\);\t;g

function! FixCallStacks()
    :%s;\[NLN\];\r;g
    :%s;\[TAB\];\t;g
endfunction

function! StripPerfCounterTags()
    %s;\(\\.*\)<.*>;\1;
    %s;<.*>;;
endfunction

function! RemoveAsciiFromQuotes()
    " See charector under cursor - 
    "   ga
    " Search for non unicode charecters
    " /[^\x00-\x7F]

    " Replace hypens
	:%s/\%x97/-/g
	:%s/\%x96/-/g

    " Replace smart quotes
	:%s/\%x93/"/g
	:%s/\%x94/"/g
    " Replace apostrophy
	:%s/\%x92/'/g
endfunction

function! FirstPersonToThirdPerson()

    " Trim the whitespace off the ends
    :%s;\s\+$;;

    " Add a period to the end if it's not there.
    :g!/\.$/s;$;.;

    " do a bunch of replaces.
    :%s;^I;You;
    :%s;\. ^I;You;g
    :%s; I ; you ;g
    :%s; am ; are ;g
    :%s; me\([ \.,$]\); you\1;g
    :%s; me\([ \.,$]\); you\1;g
    :%s; mine\([ \.,$]\); yours\1;g
    :%s;^Me ;You ;g
    :%s; myself\([ \.,$]\); yourself\1;g
    :%s; my ; your ;g
    :%s;^My ;Your ;g
    :%s;^\.$;
endfunction

":compiler build
" Make 2 or more spaces between words an error.
"match Error /\> \{2,}\</ 
"
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType python compiler pylint

" Replace content with return from wget.
"
:cab wg %!c:\bin_drop\wget --quiet --output-document - 
" JS Beautify
"     https://coderwall.com/p/m2kp5q/invoke-js-beautify-in-vim
:cab jsb %!js-beautify -j -q -B -f -<CR>

"  Vundle setup
    " Instructions @  https://github.com/VundleVim/Vundle.vim/blob/master/README.md
    " git clone https://github.com/VundleVim/Vundle.vim %USERPROFILE%/vimfiles/bundle/vundle
    " MAC - $ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim 
    filetype off                  
    set rtp+=~/vimfiles/bundle/Vundle
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()

    Bundle 'VundleVim/Vundle.vim'
    Bundle 'mattn/webapi-vim'
    Bundle 'christoomey/vim-quicklink'
    Bundle 'tpope/vim-fugitive'
    Bundle 'junegunn/limelight.vim'
    Bundle 'reedes/vim-pencil'
    Bundle 'junegunn/goyo.vim'
    Bundle 'leafgarland/typescript-vim'
    Bundle 'nathanaelkane/vim-indent-guides'
    Bundle 'tomtom/tcomment_vim'
    Bundle 'mhinz/vim-startify'
    Bundle 'tpope/vim-surround'
    Bundle 'bling/vim-airline'
    Bundle 'chrisbra/csv.vim'
    Bundle 'altercation/vim-colors-solarized'
    Bundle 'vim-scripts/ZoomWin'
    " change font size \\++
    Bundle 'drmikehenry/vim-fontsize'
    Bundle 'plasticboy/vim-markdown'
    Bundle 'elzr/vim-json'
    Bundle 'PProvost/vim-ps1'
    Bundle 'scrooloose/syntastic'
    Bundle 'othree/javascript-libraries-syntax.vim'
    Bundle "pangloss/vim-javascript"
    Bundle "scrooloose/nerdtree"
    Bundle "rking/ag.vim"
    Bundle "OrangeT/vim-csharp.git"
    Bundle "lukaszkorecki/workflowish"
    Bundle "keith/swift.vim"
    " http://vimcolors.com/?page=11
    Bundle 'flazz/vim-colorschemes'
    Bundle 'dhruvasagar/vim-table-mode'
    Bundle 'atelierbram/vim-colors_atelier-schemes'
    Bundle 'scrooloose/nerdcommenter'
    Bundle 'Shougo/unite.vim'
    Bundle 'Shougo/neomru.vim'
    "http://vimawesome.com/plugin/unite-outline-shouldve-said-no 
    Bundle 'Shougo/unite-outline'
    " Removing signifiy to try to get Syntastic working
    " Need to figure out when to use which, my preference will be to have
    " syntastic win
    " Bundle "mhinz/vim-signify"
    "
    " Replacing CtrlP with Unite
    " Bundle "kien/ctrlp.vim"

    " All of your Plugins must be added before the following line
call vundle#end()            " required


" Setup Unite
    :cab ls :Unite buffer
    :nnoremap <C-P> :Unite -start-insert file buffer neomru/file neomru/directory<cr> 
" End Setup

filetype plugin indent on    " required

" Open XCode IDE - TBD make this per MAC Only
map ,x :exe "!xed -l " . line(".") . " %" <cr> 

let g:syntastic_javascript_jshint_exec='C:\Chocolatey\lib\nodejs.commandline.0.10.33\tools\jshint.cmd'

" Set font-size default to be a decent size.
if ( has("win32") || has("win64") || has("win16") ) 
    " TBD: Get smart about first run vs reload - but can do that later.
    let defaultFont="Consolas:h14:cANSI"
    exec "set guifont=".defaultFont
endif
"
"WOFL Helpers
" HELP @ https://github.com/lukaszkorecki/workflowish"

func! OneNoteToWafl()
    " Tabs to spaces
    %s;\t;  ;g
    " Dots to *'s 
    %s/\%u2022/*/g
    %s/\%u25cb/*/g
    %s/\%u00b7/*/g
endfunc

func! WriteOn()
    :Goyo
    :PencilHard
    :LimeLight
endfunc

func! WriteOff()
    :Goyo
    :PencilOff
    :LimeLight!
endfunc
    

" TBD  Checkbox processing
"   add these only to markdown/html; checkboxopen, checkboxdone
"   Perhaps be clever and alternate between open and done like in OneNote via C-1
"       
:iab _mc_ &#x2610;
:iab _mcd_ &#x2611;

func! MarkDownWordToLink()
    " cool yiw takes the word, and jumps you to the beginning of it.
    normal yiwi[ea](http://www.pa.com)
endfunc

func! JsToSingleLineClipBoard()
    " Creating a bookmarklet requires all JS to be on a single line.
    " Make it a single line and put it on global clipboard to paste into JS
    " console.

    " NOTE: when creating bookmarklets, you'll need to terminate all lines
    " with a ';' and only use inline comments, and end with void();

    " NOTE: when making it the bookmark, you need to start with javascript:

    " Join all to one line.
    exec ":%j"
    " Copy to Clipboard
    normal "*yy
    " Undo
    normal u
endfunc

" Other schemes I liek
"
if has ("gui-running")
    :colo Tomorrow-Night-Blue
else
    :colo darkblue
endif

let g:vim_markdown_frontmatter = 1

" vim:foldmethod=indent:
